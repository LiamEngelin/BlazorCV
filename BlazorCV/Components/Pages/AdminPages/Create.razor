@page "/admin/create"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3 style="z-index: 2; position: absolute; color: white; transform: translateX(-50%); left: 50%; top: 15%;">Create Project</h3>

<div class="formDiv">
    <label for="projectBody">Body:</label>
    <textarea @bind="newBody" id="projectBody" class="form-control" rows="10"></textarea>

    <button class="btn text-white" id="submitbtn" @onclick="CreateProject">Submit Changes</button>
</div>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info">
        @responseMessage
    </div>
}

@code {
    private int projectId;
    private string newBody;
    private string responseMessage;

    protected override void OnInitialized()
    {
        // Definiera schemat som ett objekt
        var schema = new
        {
            name = "string",
            description = "string"
        };

        // Sätt newBody till JSON-strängen med formatering
        newBody = System.Text.Json.JsonSerializer.Serialize(schema, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
    }

    private async Task CreateProject()
    {
        try
        {
            // Skapa JSON-innehållet att skicka till API:et
            var content = new StringContent(newBody, System.Text.Encoding.UTF8, "application/json");

            // Skicka PUT-anrop till API:et (anpassa URL efter ditt API)
            var response = await HttpClient.PostAsync($"https://liamcvapi-cme8dudygag9a4fg.westeurope-01.azurewebsites.net/api/project/", content);

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "Item updated successfully!";
            }
            else
            {
                responseMessage = $"Failed to update item. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"An error occurred: {ex.Message}";
        }
    }
}