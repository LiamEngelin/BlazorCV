@page "/admin/create"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@rendermode InteractiveServer

<h3 style="z-index: 2; position: absolute; color: white; transform: translateX(-50%); left: 50%; top: 15%;">Create Project</h3>

<div class="formDiv">
    <label for="projectBody">Body:</label>
    <textarea @bind="newProjectBody" id="projectBody" class="form-control" rows="10" cols="40" placeholder='[
    {
        "id" : 0,
        "name" : "string",
        "description": "string"
    }
]'></textarea>

    <button class="btn text-white" id="submitbtn" @onclick="CreateProject">Create Project</button>
</div>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info">
        @responseMessage
    </div>
}

@code {
    private int projectId;
    private string newProjectBody;
    private string responseMessage;

    protected override void OnInitialized()
    {
        // Sätt newBody till JSON-strängen med formatering
        newProjectBody = @"[
            {
                ""id"": 0,
                ""name"": ""Enter project name"",
                ""description"": ""Enter project description""
            }
        ]";
    }

    private async Task CreateProject()
    {
        try
        {
            // Skapa JSON-innehållet att skicka till API:et
            var content = new StringContent(newProjectBody, System.Text.Encoding.UTF8, "application/json");

            // Skicka POST-anrop till API
            var response = await HttpClient.PostAsync($"https://liamcvapi-cme8dudygag9a4fg.westeurope-01.azurewebsites.net/api/project/", content);

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "Item updated successfully!";
            }
            else
            {
                responseMessage = $"Failed to update item. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"An error occurred: {ex.Message}";
        }
    }
}