@page "/admin/edit"
@inject ProjectService ProjectService
@inject SkillService SkillService
@rendermode InteractiveServer

<h3 class="admin-header">Redigera Project eller Skill</h3>

<div class="formDiv">
    <form onsubmit="return false">
        <div class="form-group">
            <label>Typ</label>
            <select class="form-control" @bind="selectedType">
                <option value="project">Project</option>
                <option value="skill">Skill</option>
            </select>
        </div>

        <InputNumber class="form-control" placeholder="ID" @bind-Value="itemId" />
        <button class="btn mt-2" type="button" @onclick="LoadItem">Ladda</button>

        @if (itemLoaded && selectedType == "project")
        {
            <InputText class="form-control mt-2" placeholder="Name" @bind-Value="editProject.Name" />
            <InputText class="form-control" placeholder="Description" @bind-Value="editProject.Description" />
        }

        @if (itemLoaded && selectedType == "skill")
        {
            <InputText class="form-control mt-2" placeholder="Name" @bind-Value="editSkill.Name" />
            <InputText class="form-control" placeholder="Level" @bind-Value="editSkill.Level" />
            <InputNumber class="form-control" placeholder="Years" @bind-Value="editSkill.Years" />
        }

        @if (itemLoaded)
        {
            <button class="btn mt-3" type="button" @onclick="UpdateItem">Spara ändringar</button>
        }

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert mt-3">@statusMessage</div>
        }
    </form>
</div>

@code {
    private string selectedType = "project";
    private int itemId;
    private bool itemLoaded = false;
    private string statusMessage = "";

    private Project editProject = new();
    private Skill editSkill = new();

    private async Task LoadItem()
    {
        itemLoaded = false;
        statusMessage = "";

        try
        {
            if (selectedType == "project")
            {
                var list = await ProjectService.GetProjects();
                editProject = list.FirstOrDefault(p => p.Id == itemId) ?? new();
                itemLoaded = editProject.Id != 0;
            }
            else
            {
                var list = await SkillService.GetSkills();
                editSkill = list.FirstOrDefault(s => s.Id == itemId) ?? new();
                itemLoaded = editSkill.Id != 0;
            }

            if (!itemLoaded)
                statusMessage = $"{selectedType.ToUpper()} med ID {itemId} hittades inte.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Fel vid hämtning: {ex.Message}";
        }
    }

    private async Task UpdateItem()
    {
        try
        {
            bool success;

            if (selectedType == "project")
                success = await ProjectService.EditProject(editProject);
            else
                success = await SkillService.EditSkill(editSkill);

            statusMessage = success
                ? "Uppdateringen lyckades!"
                : "Fel vid uppdatering.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Fel: {ex.Message}";
        }
    }
}